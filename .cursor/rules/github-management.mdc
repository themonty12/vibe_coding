---
description: 
globs: 
alwaysApply: false
---
# GitHub 관리 룰

## PR (Pull Request) 관리 룰

### PR 생성 규칙
1. **브랜치 명명 규칙**
   - feature/기능명
   - bugfix/버그명  
   - hotfix/긴급수정명
   - docs/문서명

2. **PR 제목 규칙**
   - feat: 새로운 기능 추가
   - fix: 버그 수정
   - docs: 문서 수정
   - style: 코드 포맷팅, 세미콜론 누락 등
   - refactor: 코드 리팩토링
   - test: 테스트 코드 추가/수정
   - chore: 빌드 업무 수정, 패키지 매니저 수정

3. **PR 설명 템플릿**
   ```
   ## 변경사항
   - 변경된 내용을 요약해주세요

   ## 테스트
   - 테스트 방법을 설명해주세요

   ## 체크리스트
   - [ ] 테스트 코드가 작성되었나요?
   - [ ] 문서가 업데이트되었나요?
   - [ ] 코드 리뷰를 받았나요?
   ```

4. **PR 리뷰 규칙**
   - 최소 1명 이상의 리뷰어 승인 필요
   - 모든 테스트 통과 필수
   - 충돌 해결 후 머지

5. **자동 라벨링 규칙**
   - 파일 경로에 따른 자동 라벨링
   - PR 크기에 따른 라벨링 (XS, S, M, L, XL)
   - 언어별 라벨링 (python, javascript 등)

## 이슈 (Issue) 관리 룰

### 이슈 생성 규칙
1. **이슈 타입**
   - bug: 버그 리포트
   - enhancement: 기능 개선 요청
   - feature: 새로운 기능 요청
   - documentation: 문서 관련
   - question: 질문

2. **이슈 템플릿**
   ```
   ## 이슈 설명
   문제나 요청사항을 자세히 설명해주세요

   ## 재현 방법 (버그인 경우)
   1. 첫 번째 단계
   2. 두 번째 단계
   3. 결과

   ## 예상 결과
   어떤 결과를 예상했는지 설명해주세요

   ## 실제 결과
   실제로 어떤 일이 일어났는지 설명해주세요

   ## 추가 정보
   스크린샷, 로그 등 추가 정보를 첨부해주세요
   ```

3. **이슈 우선순위**
   - critical: 즉시 수정 필요
   - high: 높은 우선순위
   - medium: 보통 우선순위
   - low: 낮은 우선순위

4. **자동 할당 규칙**
   - bug 라벨: 개발팀 자동 할당
   - documentation 라벨: 문서팀 자동 할당
   - 특정 파일 경로에 따른 담당자 할당

## 브랜치 보호 규칙

### main 브랜치
- 직접 push 금지
- PR을 통한 머지만 허용
- 최소 1명의 리뷰어 승인 필요
- 모든 상태 검사 통과 필수

### develop 브랜치  
- 개발 통합 브랜치
- feature 브랜치에서 PR을 통해 머지
- 정기적으로 main으로 릴리스

## 자동화 규칙

### GitHub Actions 자동 실행
1. 모든 push와 PR에서 테스트 자동 실행
2. PR 생성 시 자동 라벨링 및 할당
3. 이슈 생성 시 자동 라벨링 및 할당
4. 코드 리뷰 자동 요청
5. PR 및 이슈에 자동 댓글 등록

