---
description: 
globs: 
alwaysApply: false
---
# TASK-001: 프로젝트 구조 및 환경 설정 개발 계획

## 구현 항목

### 1. 프로젝트 폴더 구조 생성
- 백엔드/프론트엔드 폴더 분리
- FastAPI 애플리케이션 구조 설정
- Streamlit 프론트엔드 구조 설정

### 2. 가상환경 및 의존성 관리
- Python 3.11 가상환경 구성
- requirements.txt 작성
- 패키지 의존성 설치

### 3. 환경 설정 파일 구성
- .env 파일 설정
- 환경 변수 관리
- 설정 파일 구조화

## 기술 스택 및 라이브러리

### 백엔드
- **언어**: Python 3.11
- **프레임워크**: FastAPI
- **서버**: uvicorn
- **환경 관리**: python-dotenv

### 프론트엔드
- **언어**: Python 3.11
- **프레임워크**: Streamlit

### Agent
- **프레임워크**: LangGraph
- **LLM**: Gemini
- **모니터링**: LangSmith

### 도구
- **패키지 관리**: pip + venv
- **검색 도구**: LangChain DuckDuckGo Search Tool

## 개발 계획

### 1단계: 기본 폴더 구조 생성
1. 프로젝트 루트 디렉토리 확인
2. backend 폴더 생성
3. frontend 폴더 생성
4. docs 폴더 확인

### 2단계: 백엔드 구조 설정
1. backend/app 폴더 생성
2. backend/app/__init__.py 생성
3. backend/app/main.py 생성
4. backend/app/routers 폴더 생성
5. backend/app/config 폴더 생성

### 3단계: 프론트엔드 구조 설정
1. frontend 폴더 확인
2. frontend/app.py 생성
3. frontend/components 폴더 생성
4. frontend/utils 폴더 생성

### 4단계: 의존성 파일 작성
1. backend/requirements.txt 작성
2. frontend/requirements.txt 작성
3. 루트 requirements.txt 통합 작성

### 5단계: 환경 설정 파일 생성
1. .env 파일 생성
2. .env.example 파일 생성
3. .gitignore 업데이트
4. backend/app/config/settings.py 생성

### 6단계: 기본 설정 파일 생성
1. backend/app/config/__init__.py 생성
2. 환경 변수 로드 기능 구현
3. 설정 클래스 정의

### 7단계: 검증 및 테스트
1. 폴더 구조 검증
2. 가상환경 활성화 테스트
3. 패키지 설치 테스트
4. 환경 변수 로드 테스트

