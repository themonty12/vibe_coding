name: PR Automation

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  pr-comment:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üéâ **PRÏù¥ ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!**
              
              ÏïàÎÖïÌïòÏÑ∏Ïöî @${{ github.event.pull_request.user.login }}Îãò! PRÏùÑ ÏÉùÏÑ±Ìï¥Ï£ºÏÖîÏÑú Í∞êÏÇ¨Ìï©ÎãàÎã§.
              
              ## Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏
              - [ ] ÌÖåÏä§Ìä∏ ÏΩîÎìúÍ∞Ä ÏûëÏÑ±ÎêòÏóàÎÇòÏöî?
              - [ ] ÏΩîÎìú Î¶¨Î∑∞Î•º Î∞õÏïòÎÇòÏöî?
              - [ ] Î¨∏ÏÑúÍ∞Ä ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÎÇòÏöî?
              - [ ] Î™®Îì† ÌÖåÏä§Ìä∏Í∞Ä ÌÜµÍ≥ºÌñàÎÇòÏöî?
              
              ## Îã§Ïùå Îã®Í≥Ñ
              1. CI/CD ÌååÏù¥ÌîÑÎùºÏù∏Ïù¥ ÏûêÎèôÏúºÎ°ú Ïã§ÌñâÎê©ÎãàÎã§
              2. ÏΩîÎìú Î¶¨Î∑∞Ïñ¥Í∞Ä ÏûêÎèôÏúºÎ°ú Ìï†ÎãπÎê©ÎãàÎã§
              3. Ï†ÅÏ†àÌïú ÎùºÎ≤®Ïù¥ ÏûêÎèôÏúºÎ°ú Ï∂îÍ∞ÄÎê©ÎãàÎã§
              
              Î¶¨Î∑∞ ÏôÑÎ£å ÌõÑ Î®∏ÏßÄÍ∞Ä Í∞ÄÎä•Ìï©ÎãàÎã§. Í∂ÅÍ∏àÌïú Ï†êÏù¥ ÏûàÏúºÏãúÎ©¥ Ïñ∏Ï†úÎì† Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî! üöÄ`
            })

  pr-assign:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: Auto assign reviewers
        uses: actions/github-script@v6
        with:
          script: |
            const assignees = [];
            const reviewers = [];
            
            // ÌååÏùº Í≤ΩÎ°úÏóê Îî∞Î•∏ Î¶¨Î∑∞Ïñ¥ Ìï†Îãπ Î°úÏßÅ
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const changedFiles = files.map(file => file.filename);
            
            // Î∞±ÏóîÎìú ÌååÏùº Î≥ÄÍ≤Ω Ïãú
            if (changedFiles.some(file => file.startsWith('backend/'))) {
              // backend Í∞úÎ∞úÏûêÎì§ÏùÑ Ïó¨Í∏∞Ïóê Ï∂îÍ∞Ä (Ïã§Ï†ú GitHub ÏÇ¨Ïö©ÏûêÎ™ÖÏúºÎ°ú Î≥ÄÍ≤Ω)
              // reviewers.push('backend-developer1', 'backend-developer2');
            }
            
            // ÌîÑÎ°†Ìä∏ÏóîÎìú ÌååÏùº Î≥ÄÍ≤Ω Ïãú
            if (changedFiles.some(file => file.startsWith('frontend/'))) {
              // frontend Í∞úÎ∞úÏûêÎì§ÏùÑ Ïó¨Í∏∞Ïóê Ï∂îÍ∞Ä (Ïã§Ï†ú GitHub ÏÇ¨Ïö©ÏûêÎ™ÖÏúºÎ°ú Î≥ÄÍ≤Ω)
              // reviewers.push('frontend-developer1', 'frontend-developer2');
            }
            
            // Î¨∏ÏÑú ÌååÏùº Î≥ÄÍ≤Ω Ïãú
            if (changedFiles.some(file => file.endsWith('.md') || file.startsWith('docs/'))) {
              // Î¨∏ÏÑú Îã¥ÎãπÏûêÎ•º Ïó¨Í∏∞Ïóê Ï∂îÍ∞Ä (Ïã§Ï†ú GitHub ÏÇ¨Ïö©ÏûêÎ™ÖÏúºÎ°ú Î≥ÄÍ≤Ω)
              // reviewers.push('docs-maintainer');
            }
            
            // PR ÏûëÏÑ±ÏûêÎ•º assigneeÎ°ú Ï∂îÍ∞Ä
            assignees.push(context.payload.pull_request.user.login);
            
            // Î¶¨Î∑∞Ïñ¥ Ìï†Îãπ
            if (reviewers.length > 0) {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                reviewers: reviewers
              });
            }
            
            // Assignee Ìï†Îãπ
            if (assignees.length > 0) {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                assignees: assignees
              });
            }

  pr-labeler:
    runs-on: ubuntu-latest
    steps:
      - name: Auto label PR
        uses: actions/github-script@v6
        with:
          script: |
            const labels = [];
            
            // PR Ï†úÎ™©Ïóê Îî∞Î•∏ ÎùºÎ≤®ÎßÅ
            const title = context.payload.pull_request.title.toLowerCase();
            
            if (title.includes('feat:') || title.includes('feature')) {
              labels.push('enhancement');
            }
            if (title.includes('fix:') || title.includes('bugfix')) {
              labels.push('bug');
            }
            if (title.includes('docs:') || title.includes('documentation')) {
              labels.push('documentation');
            }
            if (title.includes('test:')) {
              labels.push('test');
            }
            if (title.includes('refactor:')) {
              labels.push('refactor');
            }
            if (title.includes('chore:')) {
              labels.push('chore');
            }
            
            // Î≥ÄÍ≤ΩÎêú ÌååÏùºÏóê Îî∞Î•∏ ÎùºÎ≤®ÎßÅ
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const changedFiles = files.map(file => file.filename);
            
            if (changedFiles.some(file => file.startsWith('backend/'))) {
              labels.push('backend');
            }
            if (changedFiles.some(file => file.startsWith('frontend/'))) {
              labels.push('frontend');
            }
            if (changedFiles.some(file => file.endsWith('.py'))) {
              labels.push('python');
            }
            if (changedFiles.some(file => file.endsWith('.js') || file.endsWith('.jsx'))) {
              labels.push('javascript');
            }
            if (changedFiles.some(file => file.endsWith('.md'))) {
              labels.push('documentation');
            }
            
            // PR ÌÅ¨Í∏∞Ïóê Îî∞Î•∏ ÎùºÎ≤®ÎßÅ
            const additions = context.payload.pull_request.additions;
            const deletions = context.payload.pull_request.deletions;
            const totalChanges = additions + deletions;
            
            if (totalChanges < 10) {
              labels.push('size/XS');
            } else if (totalChanges < 30) {
              labels.push('size/S');
            } else if (totalChanges < 100) {
              labels.push('size/M');
            } else if (totalChanges < 500) {
              labels.push('size/L');
            } else {
              labels.push('size/XL');
            }
            
            // ÎùºÎ≤® Ï†ÅÏö©
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }

  pr-code-review-request:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened'
    steps:
      - name: Request code review
        uses: actions/github-script@v6
        with:
          script: |
            // ÏΩîÎìú Î¶¨Î∑∞ ÏöîÏ≤≠ ÎåìÍ∏Ä Ï∂îÍ∞Ä
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üîç **ÏΩîÎìú Î¶¨Î∑∞ ÏöîÏ≤≠**
              
              Ïù¥ PRÏóê ÎåÄÌïú ÏΩîÎìú Î¶¨Î∑∞Î•º ÏöîÏ≤≠Ìï©ÎãàÎã§.
              
              ## Î¶¨Î∑∞ Ìè¨Ïù∏Ìä∏
              - ÏΩîÎìú ÌíàÏßà Î∞è Í∞ÄÎèÖÏÑ±
              - ÌÖåÏä§Ìä∏ Ïª§Î≤ÑÎ¶¨ÏßÄ
              - ÏÑ±Îä• ÏòÅÌñ•ÎèÑ
              - Î≥¥Ïïà Ïù¥Ïäà
              - ÏïÑÌÇ§ÌÖçÏ≤ò Ï§ÄÏàò
              
              Î¶¨Î∑∞Ïñ¥Î∂ÑÎì§ÍªòÏÑúÎäî Í∞ÄÎä•Ìïú ÏãúÍ∞ÑÏóê Î¶¨Î∑∞ Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§! üôè`
            });
            
            // Draft PRÏù¥ ÏïÑÎãå Í≤ΩÏö∞ÏóêÎßå Î¶¨Î∑∞ ÏöîÏ≤≠
            if (!context.payload.pull_request.draft) {
              // Ïó¨Í∏∞Ïóê Í∏∞Î≥∏ Î¶¨Î∑∞Ïñ¥Îì§ÏùÑ Ï∂îÍ∞ÄÌï† Ïàò ÏûàÏäµÎãàÎã§
              // const defaultReviewers = ['reviewer1', 'reviewer2'];
              // 
              // if (defaultReviewers.length > 0) {
              //   await github.rest.pulls.requestReviewers({
              //     owner: context.repo.owner,
              //     repo: context.repo.repo,
              //     pull_number: context.issue.number,
              //     reviewers: defaultReviewers
              //   });
              // }
            } 